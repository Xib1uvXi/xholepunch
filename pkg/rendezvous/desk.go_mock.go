// Code generated by MockGen. DO NOT EDIT.
// Source: desk.go
//
// Generated by this command:
//
//	mockgen -source=desk.go -destination=desk.go_mock.go -package=rendezvous
//

// Package rendezvous is a generated GoMock package.
package rendezvous

import (
	net "net"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConnectHandler is a mock of ConnectHandler interface.
type MockConnectHandler struct {
	ctrl     *gomock.Controller
	recorder *MockConnectHandlerMockRecorder
}

// MockConnectHandlerMockRecorder is the mock recorder for MockConnectHandler.
type MockConnectHandlerMockRecorder struct {
	mock *MockConnectHandler
}

// NewMockConnectHandler creates a new mock instance.
func NewMockConnectHandler(ctrl *gomock.Controller) *MockConnectHandler {
	mock := &MockConnectHandler{ctrl: ctrl}
	mock.recorder = &MockConnectHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectHandler) EXPECT() *MockConnectHandlerMockRecorder {
	return m.recorder
}

// HandleConnect mocks base method.
func (m *MockConnectHandler) HandleConnect(conn *net.TCPConn, token string, nat int8) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleConnect", conn, token, nat)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleConnect indicates an expected call of HandleConnect.
func (mr *MockConnectHandlerMockRecorder) HandleConnect(conn, token, nat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleConnect", reflect.TypeOf((*MockConnectHandler)(nil).HandleConnect), conn, token, nat)
}
